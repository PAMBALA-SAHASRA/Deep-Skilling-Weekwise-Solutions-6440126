ðŸ”¹Bubble Sort:
->Repeatedly swaps adjacent elements if they are in the wrong order.
->Time Complexity: O(nÂ²)
*Best for: Small or nearly sorted datasets.

ðŸ”¹ Insertion Sort (for info):
->Builds sorted list by inserting elements into correct positions.
->Time Complexity: O(nÂ²)

ðŸ”¹ Quick Sort:
->Divide-and-conquer algorithm that partitions the array.
->Average Time Complexity: O(n log n)
->Worst-case: O(nÂ²) but rarely happens with good pivot choice.

ðŸ”¹ Merge Sort (for info):
->Recursively splits and merges arrays.
->Time Complexity: O(n log n)


| Algorithm       | Best       | Average    | Worst   |
| --------------- | ---------- | ---------- | ------- |
|   Bubble Sort   | O(n)       | O(nÂ²)      | O(nÂ²)   |
|   Quick Sort    | O(n log n) | O(n log n) | O(nÂ²)\* |


*Quick Sort is generally preferred over Bubble Sort because it is faster, more efficient, and scales better with data size.

